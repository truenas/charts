#!/usr/bin/python3
import json
import os
import sys


def migrate(values):
    upgradeMeta = values.get('global', {}).get('ixChartContext', {}).get('upgradeMetadata', {})
    oldVersion = upgradeMeta.get('oldChartVersion', None)
    newVersion = upgradeMeta.get('newChartVersion', None)

    # TODO: Is the raise exception the right way to handle abort upgrade/migration?
    if oldVersion is None or newVersion is None:
        raise Exception('Missing upgrade metadata')

    # If the old version is 2.x.x, we have nothing to do
    if oldVersion.startswith('2'):
        return values

    if oldVersion.startswith('1') and newVersion.startswith('1'):
        return values

    # If the new (target) version is 2.x.x and the old version is 1.x.x
    # We have to migrate
    if newVersion.startswith('2') and oldVersion.startswith('1'):
        # But only if the old version is 1.0.11 or higher
        oldVersionParts = oldVersion.split('.')
        if len(oldVersionParts) != 3:
            raise Exception(f'Invalid version {oldVersion}')
        if int(oldVersionParts[2]) < 11:
            raise Exception(f'Migration to 2.x.x is only allowed from 1.0.11 or higher')

    migratedKeys = []
    newValues = values.copy()

    # Migrate Resources
    newValues['resources'] = {
        'limits': {
            'cpu': values.get('cpuLimit', '4000m'),
            'memory': values.get('memoryLimit', '8Gi'),
        },
    }

    migratedKeys.append('cpuLimit')
    migratedKeys.append('memoryLimit')
    migratedKeys.append('enableResourceLimits')

    # Migration Network
    newValues['wgNetwork'] = {
        'udpPort': values['wgUDPPort'],
        'webPort': values['webUIPort'],
        'hostNetwork': values['hostNetwork']
    }

    migratedKeys.append('wgUDPPort')
    migratedKeys.append('webUIPort')
    migratedKeys.append('hostNetwork')

    # Migrate DNS
    newValues['podOptions'] = {
        'dnsConfig': {
            'options': []
        }
    }
    for opt in values.get('dnsConfig', {}).get('options', []):
        newValues['podOptions']['dnsConfig']['options'].append({
            'name': opt['name'],
            'value': opt['value'],
        })

    migratedKeys.append('dnsConfig')

    # Migrate Config
    newValues['wgConfig'] = {
        'host': values['wgeasy']['host'],
        'password': values['wgeasy'].get('password',''),
        'keepAlive': values['wgeasy']['keep_alive'],
        'clientMTU': values['wgeasy']['client_mtu'],
        'clientAddressRange': values['wgeasy']['client_address_range'],
        'clientDNSServer': values['wgeasy']['client_dns_server'],
        'allowedIPs': values['wgeasy']['allowed_ips'],
        'additionalEnvs': values.get('environmentVariables', []),
    }

    migratedKeys.append('wgeasy')
    migratedKeys.append('environmentVariables')

    # Migrate Storage
    newValues['wgStorage'] = {}
    configStorage = values['appVolumeMounts']['config']
    if configStorage['hostPathEnabled']:
        newValues['wgStorage']['config'] = {
            'type': 'hostPath',
            'hostPath': configStorage['hostPath'],
        }
    else:
        newValues['wgStorage']['config'] = {
            'type': 'ixVolume',
            'datasetName': configStorage['datasetName'],
        }

    migratedKeys.append('appVolumeMounts')

    # Migrate Additional Storage
    newValues['wgStorage']['additionalStorages'] = []
    for extraStorage in values['extraAppVolumeMounts']:
        if extraStorage:
            newValues['wgStorage']['additionalStorages'].append({
                'type': 'hostPath',
                'mountPath': extraStorage['mountPath'],
                'hostPath': extraStorage['hostPath'],
            })

    migratedKeys.append('extraAppVolumeMounts')

    # Clean up old keys
    for key in migratedKeys:
        if key in newValues:
            del newValues[key]

    return newValues


if __name__ == '__main__':
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], 'r') as f:
            print(json.dumps(migrate(json.loads(f.read()))))
