#!/usr/bin/python3
import json
import os
import sys


def migrate(values):
    upgradeMeta = values.get('global', {}).get('ixChartContext', {}).get('upgradeMetadata', {})
    oldVersion = upgradeMeta.get('oldChartVersion', None)
    newVersion = upgradeMeta.get('newChartVersion', None)

    if oldVersion is None or newVersion is None:
        raise Exception('Missing upgrade metadata')

    # If the old version is 2.x.x, we have nothing to do
    if oldVersion.startswith('2'):
        return values

    if oldVersion.startswith('1') and newVersion.startswith('1'):
        return values

    # If the new (target) version is 2.x.x and the old version is 1.x.x
    # We have to migrate
    if newVersion.startswith('2') and oldVersion.startswith('1'):
        # But only if the old version is 1.0.11 or higher
        oldVersionParts = oldVersion.split('.')
        if len(oldVersionParts) != 3:
            raise Exception(f'Invalid version {oldVersion}')
        if int(oldVersionParts[2]) < 11:
            raise Exception(f'Migration to 2.x.x is only allowed from 1.0.11 or higher')

    # Create an empty dict, so we can throw away the old values, instead of deleting each key
    newValues = {}
    newValues.update({
        # Migrate Network
        'wgNetwork': {
            'udpPort': values['wgUDPPort'],
            'webPort': values['webUIPort'],
            'hostNetwork': values['hostNetwork'],
        },
        # Migrate Resources
        'resources': {
            'limits': {
                'cpu': values.get('cpuLimit', '4000m'),
                'memory': values.get('memLimit', '8Gi'),
            }
        },
        # Migrate DNS
        'podOptions': {
            'dnsConfig': {
                'options': [
                    {'name': opt['name'], 'value': opt['value']}
                    for opt in values.get('dnsConfig', {}).get('options', [])
                ]
            }
        },
        # Migrate Config
        'wgConfig': {
            'host': values['wgeasy']['host'],
            'password': values['wgeasy'].get('password', ''),
            'keepAlive': values['wgeasy']['keep_alive'],
            'clientMTU': values['wgeasy']['client_mtu'],
            'clientAddressRange': values['wgeasy']['client_address_range'],
            'clientDNSServer': values['wgeasy']['client_dns_server'],
            'allowedIPs': values['wgeasy']['allowed_ips'],
            'additionalEnvs': values.get('environmentVariables', []),
        },
        # Migrate Storage
        'wgStorage': {
            'config': {
                'type': 'hostPath',
                'hostPathConfig': {
                    'hostPath': values['appVolumeMounts']['config']['hostPath']
                },
            } if values['appVolumeMounts']['config']['hostPathEnabled'] else {
                'type': 'ixVolume',
                'ixVolumeConfig': {
                    'datasetName': values['appVolumeMounts']['config']['datasetName'],
                },
            },
            'additionalStorages': [
                {
                    'type': 'hostPath',
                    'hostPathConfig': {'hostPath': e['hostPath']},
                    'mountPath': e['mountPath'],
                }
                for e in values.get('extraAppVolumeMounts', [])
            ],
        },
    })

    return newValues


if __name__ == '__main__':
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], 'r') as f:
            print(json.dumps(migrate(json.loads(f.read()))))
