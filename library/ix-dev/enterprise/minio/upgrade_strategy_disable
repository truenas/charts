#!/usr/bin/python3
import json
import re
import sys

from catalog_update.upgrade_strategy import semantic_versioning
from catalog_update.upgrade_strategy import datetime_versioning


ENUMS = {
    'image': {
        'RE_STABLE_VERSION': re.compile(r'RELEASE.\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2}}Z'),
        'STRIP_TEXT': 'RELEASE.',
        'function': datetime_versioning,
        'function_arg': '%Y-%m-%dT%H-%M-%SZ'
    },
    'logsearchImage': {
        'RE_STABLE_VERSION': re.compile(r'v\d+\.\d+\.\d+'),
        'STRIP_TEXT': 'v',
        'function': semantic_versioning
    },
}


def newer_mapping(image_tags):

    output = {
        "tags": {},
        "app_version": ""
    }

    for key in image_tags.keys():
        STRIP_TEXT = ENUMS[key].get('STRIP_TEXT', None) if key in ENUMS else None
        RE_STABLE_VERSION = ENUMS[key].get('RE_STABLE_VERSION', None) if key in ENUMS else None
        VERSION_FUNCTION = ENUMS[key].get('function', None) if key in ENUMS else None

        if (STRIP_TEXT is None) or (RE_STABLE_VERSION is None) or (VERSION_FUNCTION is None):
            continue

        tags = {t.strip(STRIP_TEXT): t for t in image_tags[key] if RE_STABLE_VERSION.fullmatch(t)}
        if ENUMS[key].get('function_arg', None):
            version = VERSION_FUNCTION(list(tags), ENUMS[key].get('function_arg'))
        else:
            version = VERSION_FUNCTION(list(tags))
        if not version:
            continue

        if key == 'image':
            output['app_version'] = version

        output['tags'][key] = tags[version]

    return output


if __name__ == '__main__':
    try:
        versions_json = json.loads(sys.stdin.read())
    except ValueError:
        raise ValueError('Invalid json specified')

    print(json.dumps(newer_mapping(versions_json)))
